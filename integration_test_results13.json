{
    "Repo": {
      "remoteUrl": "https://github.com/Pytest-with-Eric/pytest-fastapi-crud-example.git",
      "languages": ["py"]
    },
    "IntegrationTest": {
      "fileContent": "import time\n\n\ndef test_root(test_client):\n    response = test_client.get(\"/api/healthchecker\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"The API is LIVE!!\"}\n\n\ndef test_create_get_user(test_client, user_payload):\n    response = test_client.post(\"/api/users/\", json=user_payload)\n    response_json = response.json()\n    assert response.status_code == 201\n\n    # Get the created user\n    response = test_client.get(f\"/api/users/{user_payload['id']}\")\n    assert response.status_code == 200\n    response_json = response.json()\n    assert response_json[\"Status\"] == \"Success\"\n    assert response_json[\"User\"][\"id\"] == user_payload[\"id\"]\n    assert response_json[\"User\"][\"address\"] == \"123 Farmville\"\n    assert response_json[\"User\"][\"first_name\"] == \"John\"\n    assert response_json[\"User\"][\"last_name\"] == \"Doe\"\n\n\ndef test_create_update_user(test_client, user_payload, user_payload_updated):\n    response = test_client.post(\"/api/users/\", json=user_payload)\n    response_json = response.json()\n    assert response.status_code == 201\n\n    # Update the created user\n    time.sleep(\n        1\n    )  # Sleep for 1 second to ensure updatedAt is different (datetime precision is low in SQLite)\n    response = test_client.patch(\n        f\"/api/users/{user_payload['id']}\", json=user_payload_updated\n    )\n    response_json = response.json()\n    assert response.status_code == 202\n    assert response_json[\"Status\"] == \"Success\"\n    assert response_json[\"User\"][\"id\"] == user_payload[\"id\"]\n    assert response_json[\"User\"][\"address\"] == \"321 Farmville\"\n    assert response_json[\"User\"][\"first_name\"] == \"Jane\"\n    assert response_json[\"User\"][\"last_name\"] == \"Doe\"\n    assert response_json[\"User\"][\"activated\"] is True\n    assert (\n        response_json[\"User\"][\"updatedAt\"] is not None\n        and response_json[\"User\"][\"updatedAt\"] > response_json[\"User\"][\"createdAt\"]\n    )\n\n\ndef test_create_delete_user(test_client, user_payload):\n    response = test_client.post(\"/api/users/\", json=user_payload)\n    response_json = response.json()\n    assert response.status_code == 201\n\n    # Delete the created user\n    response = test_client.delete(f\"/api/users/{user_payload['id']}\")\n    response_json = response.json()\n    assert response.status_code == 202\n    assert response_json[\"Status\"] == \"Success\"\n    assert response_json[\"Message\"] == \"User deleted successfully\"\n\n    # Get the deleted user\n    response = test_client.get(f\"/api/users/{user_payload['id']}\")\n    assert response.status_code == 404\n    response_json = response.json()\n    assert response_json[\"detail\"] == f\"No User with this id: `{user_payload['id']}` found\"\n\n\ndef test_get_user_not_found(test_client, user_id):\n    response = test_client.get(f\"/api/users/{user_id}\")\n    assert response.status_code == 404\n    response_json = response.json()\n    assert response_json[\"detail\"] == f\"No User with this id: `{user_id}` found\"\n\n\ndef test_create_user_wrong_payload(test_client):\n    response = test_client.post(\"/api/users/\", json={})\n    assert response.status_code == 422\n\n\ndef test_update_user_wrong_payload(test_client, user_id, user_payload_updated):\n    user_payload_updated[\"first_name\"] = (\n        True  # first_name should be a string not a boolean\n    )\n    response = test_client.patch(f\"/api/users/{user_id}\", json=user_payload_updated)\n    assert response.status_code == 422\n    response_json = response.json()\n    assert response_json == {\n        \"detail\": [\n            {\n                \"type\": \"string_type\",\n                \"loc\": [\"body\", \"first_name\"],\n                \"msg\": \"Input should be a valid string\",\n                \"input\": True,\n            }\n        ]\n    }\n\n\ndef test_update_user_doesnt_exist(test_client, user_id, user_payload_updated):\n    response = test_client.patch(f\"/api/users/{user_id}\", json=user_payload_updated)\n    assert response.status_code == 404\n    response_json = response.json()\n    assert response_json[\"detail\"] == f\"No User with this id: `{user_id}` found\"\n"
    },
    "IntegrationTestRun": {
      "commitId": "d47bb85f26c4dc55877563a6c79ecef2c8d50706",
      "result": {
        "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.12.9, pytest-8.2.2, pluggy-1.5.0 -- /Users/aadityasubedi/miniconda3/bin/python\ncachedir: .pytest_cache\nUsing --randomly-seed=231380737\nrootdir: /Users/aadityasubedi/Desktop/eval-set/repo13/pytest-fastapi-crud-example\nconfigfile: pytest.ini\nplugins: snapshot-0.9.0, socket-0.7.0, randomly-3.15.0, anyio-4.8.0, asyncio-0.26.0, langsmith-0.3.19, cov-6.1.1\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollected 8 items                                                              \n\ntests/test_crud_api.py::test_update_user_doesnt_exist \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: PATCH http://testserver/api/users/83f7c5e4-9348-47b8-9530-667164ce6977 \"HTTP/1.1 404 Not Found\"\nPASSED                                                                   [ 12%]\ntests/test_crud_api.py::test_create_update_user \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: POST http://testserver/api/users/ \"HTTP/1.1 201 Created\"\nINFO     httpx:_client.py:1038 HTTP Request: PATCH http://testserver/api/users/bc7f8b52-979d-41e9-9f2b-a5915d7f389c \"HTTP/1.1 202 Accepted\"\nPASSED                                                                   [ 25%]\ntests/test_crud_api.py::test_update_user_wrong_payload \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: PATCH http://testserver/api/users/0c534e62-8739-4cea-8d89-5201b11f22b2 \"HTTP/1.1 422 Unprocessable Entity\"\nPASSED                                                                   [ 37%]\ntests/test_crud_api.py::test_create_delete_user \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: POST http://testserver/api/users/ \"HTTP/1.1 201 Created\"\nINFO     httpx:_client.py:1038 HTTP Request: DELETE http://testserver/api/users/d2090bb1-75f7-460f-85db-d7038998be80 \"HTTP/1.1 202 Accepted\"\nINFO     httpx:_client.py:1038 HTTP Request: GET http://testserver/api/users/d2090bb1-75f7-460f-85db-d7038998be80 \"HTTP/1.1 404 Not Found\"\nPASSED                                                                   [ 50%]\ntests/test_crud_api.py::test_get_user_not_found \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: GET http://testserver/api/users/39fe9475-bb16-4111-955f-d6e2c0bf1034 \"HTTP/1.1 404 Not Found\"\nPASSED                                                                   [ 62%]\ntests/test_crud_api.py::test_create_user_wrong_payload \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: POST http://testserver/api/users/ \"HTTP/1.1 422 Unprocessable Entity\"\nPASSED                                                                   [ 75%]\ntests/test_crud_api.py::test_root \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: GET http://testserver/api/healthchecker \"HTTP/1.1 200 OK\"\nPASSED                                                                   [ 87%]\ntests/test_crud_api.py::test_create_get_user \n-------------------------------- live log setup --------------------------------\nDEBUG    asyncio:selector_events.py:64 Using selector: KqueueSelector\n-------------------------------- live log call ---------------------------------\nINFO     httpx:_client.py:1038 HTTP Request: POST http://testserver/api/users/ \"HTTP/1.1 201 Created\"\nINFO     httpx:_client.py:1038 HTTP Request: GET http://testserver/api/users/64635825-da29-4f9d-8718-02da15547c45 \"HTTP/1.1 200 OK\"\nPASSED                                                                   [100%]\n\n============================== 8 passed in 1.06s ===============================",
        "stderr": "/Users/aadityasubedi/miniconda3/lib/python3.12/site-packages/pytest_asyncio/plugin.py:217: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))",
        "returnCode": 0
      },
      "pass": true
    }
  }
  