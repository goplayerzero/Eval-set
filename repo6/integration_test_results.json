{
  "Repo": {
    "remoteUrl": "",
    "languages": ["ts", "js"]
  },
  "IntegrationTest": {
    "fileContent": "import faker from 'faker';\nimport supertest from 'supertest';\nimport { prisma } from '../../prisma/index';\nimport { app } from '../app';\n\ndescribe('post create', () => {\n  it('should create a post', async () => {\n    expect(await prisma.post.count()).toBe(0);\n    const title = faker.lorem.word();\n    const content = faker.lorem.word();\n    const response = await supertest(app)\n      .get(`/posts/new?title=${title}&content=${content}`)\n      .expect(200);\n    expect(JSON.parse(response.text)).toEqual(expect.objectContaining({ title, content }));\n    expect(await prisma.post.count()).toBe(1);\n  });\n\n  describe('with invalid values', () => {\n    it('should return an error', async () => {\n      expect(await prisma.post.count()).toBe(0);\n      const response = await supertest(app).get(`/posts/new`).expect(400);\n      expect(response.text).toBe('invalid query params');\n      expect(await prisma.post.count()).toBe(0);\n    });\n  });\n});"
  },
  "IntegrationTestRun": {
    "commitId": "c31146f21ecaa4a5c46ae0410f84891b2aa2b533",
    "result": {
      "stdout": "\n> test\n> jest --verbose\n\n PASS  src/__tests__/create-post.test.ts\n  post create                     \n    ✓ should create a post (605 ms)     \n    with invalid values                 \n      ✓ should return an error (485 ms) \n                                        \n PASS  src/__tests__/posts.test.ts      \n  posts list                            \n    ✓ should return empty array (592 ms)\n    with existing posts                 \n      ✓ should return posts (511 ms)    \n                                        \nTest Suites: 2 passed, 2 total          \nTests:       4 passed, 4 total          \nSnapshots:   0 total                    \nTime:        2.812 s, estimated 3 s     \nRan all test suites.",
      "stderr": "",
      "returnCode": 0
    },
    "pass": true
  }
}
