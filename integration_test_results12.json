{
    "Repo": {
      "remoteUrl": "https://github.com/ChrisKlug/asp-net-core-integration-testing-demo.git",
      "languages": ["cs"]
    },
    "IntegrationTest": {
      "fileContent": "using AspNetCoreTesting.Api.Data;\nusing AspNetCoreTesting.Api.Data.Entities;\nusing AspNetCoreTesting.Api.Services;\nusing Bazinga.AspNetCore.Authentication.Basic;\nusing FakeItEasy;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc.Testing;\nusing Microsoft.AspNetCore.TestHost;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Storage;\nusing Microsoft.Extensions.DependencyInjection;\nusing Newtonsoft.Json.Linq;\nusing System;\nusing System.Net;\nusing System.Net.Http.Headers;\nusing System.Net.Http.Json;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Xunit;\n\nnamespace AspNetCoreTesting.Api.Tests\n{\n    public class UsersControllerTests\n    {\n        private const string Username = \"Test\";\n        private const string Password = \"test\";\n        private readonly string base64EncodedAuthenticationString = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes($\"{Username}:{Password}\"));\n        private const string SqlConnectionString = \"Server=localhost,14331;Database=AspNetCoreTesting;User Id=sa;Password=P@ssword123\";\n        private INotificationService NotificationServiceFake = A.Fake<INotificationService>();\n\n        [Fact]\n        public async Task Get_returns_401_Unauthorized_if_not_authenticated()\n        {\n            var application = GetWebApplication();\n\n            var client = application.CreateClient();\n\n            var response = await client.GetAsync(\"/users\");\n\n            Assert.Equal(HttpStatusCode.Unauthorized, response.StatusCode);\n        }\n\n        [Fact]\n        public async Task Get_returns_all_users()\n        {\n            var application = GetWebApplication();\n\n            using (var services = application.Services.CreateScope())\n            {\n                IDbContextTransaction? transaction = null;\n                try\n                {\n                    var ctx = services.ServiceProvider.GetRequiredService<ApiContext>();\n                    transaction = ctx.Database.BeginTransaction();\n\n                    var conn = ctx.Database.GetDbConnection();\n                    using (var cmd = conn.CreateCommand())\n                    {\n                        cmd.Transaction = transaction.GetDbTransaction();\n                        cmd.CommandText = \"SET IDENTITY_INSERT Users ON; \" +\n                                        \"INSERT INTO Users (Id, FirstName, LastName) VALUES\" +\n                                        \"(1, 'John', 'Doe'), \" +\n                                        \"(2, 'Jane', 'Doe'); \" +\n                                        \"SET IDENTITY_INSERT Users OFF;\";\n                        await cmd.ExecuteNonQueryAsync();\n                    }\n\n                    var client = application.CreateClient();\n                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Basic\", base64EncodedAuthenticationString);\n\n                    var response = await client.GetAsync(\"/users\");\n\n                    dynamic users = JArray.Parse(await response.Content.ReadAsStringAsync());\n\n                    Assert.Equal(2, users.Count);\n                    Assert.Equal(\"John\", (string)users[0].firstName);\n                    Assert.Equal(\"Doe\", (string)users[1].lastName);\n                }\n                finally\n                {\n                    transaction?.Rollback();\n                }\n            }\n        }\n\n        [Fact]\n        public async Task Put_returns_Created_if_successful()\n        {\n            var application = GetWebApplication();\n\n            using (var services = application.Services.CreateScope())\n            {\n                IDbContextTransaction? transaction = null;\n                try\n                {\n                    var ctx = services.ServiceProvider.GetRequiredService<ApiContext>();\n                    transaction = ctx.Database.BeginTransaction();\n\n                    var client = application.CreateClient();\n                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Basic\", base64EncodedAuthenticationString);\n\n                    var response = await client.PutAsJsonAsync(\"/users/\", new { firstName = \"John\", lastName = \"Doe\" });\n\n                    dynamic user = JObject.Parse(await response.Content.ReadAsStringAsync());\n\n                    Assert.Equal(\"John\", (string)user.firstName);\n                    Assert.Equal(\"Doe\", (string)user.lastName);\n                    Assert.Equal(System.Net.HttpStatusCode.Created, response.StatusCode);\n                    Assert.Matches(\"^http:\\\\/\\\\/localhost\\\\/users\\\\/\\\\d+$\", response.Headers.Location!.AbsoluteUri.ToLower());\n\n                    var userId = int.Parse(response.Headers.Location!.PathAndQuery.Substring(response.Headers.Location!.PathAndQuery.LastIndexOf(\"/\") + 1));\n\n                    var conn = ctx.Database.GetDbConnection();\n                    using (var cmd = conn.CreateCommand())\n                    {\n                        cmd.Transaction = transaction.GetDbTransaction();\n                        cmd.CommandText = $\"SELECT TOP 1 * FROM Users WHERE Id = {userId}\";\n                        using (var rs = await cmd.ExecuteReaderAsync())\n                        {\n                            Assert.True(await rs.ReadAsync());\n                            Assert.Equal(\"John\", rs[\"FirstName\"]);\n                            Assert.Equal(\"Doe\", rs[\"LastName\"]);\n                        }\n                    }\n                }\n                finally\n                {\n                    transaction?.Rollback();\n                }\n            }\n        }\n\n        [Fact]\n        public async Task Put_returns_sends_notification_if_successful()\n        {\n            var application = GetWebApplication();\n\n            using (var services = application.Services.CreateScope())\n            {\n                IDbContextTransaction? transaction = null;\n                try\n                {\n                    var ctx = services.ServiceProvider.GetRequiredService<ApiContext>();\n                    transaction = ctx.Database.BeginTransaction();\n\n                    var client = application.CreateClient();\n                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Basic\", base64EncodedAuthenticationString);\n\n                    var response = await client.PutAsJsonAsync(\"/users/\", new { firstName = \"John\", lastName = \"Doe\" });\n\n                    A.CallTo(() =>\n                        NotificationServiceFake.SendUserCreatedNotification(A<User>.That.Matches(x => x.FirstName == \"John\" && x.LastName == \"Doe\"))\n                    ).MustHaveHappened();\n                }\n                finally\n                {\n                    transaction?.Rollback();\n                }\n            }\n        }\n\n        private WebApplicationFactory<Program> GetWebApplication()\n            => new WebApplicationFactory<Program>().WithWebHostBuilder(builder =>\n            {\n                builder.ConfigureTestServices(services =>\n                {\n                    var options = new DbContextOptionsBuilder<ApiContext>()\n                                    .UseSqlServer(SqlConnectionString)\n                                    .Options;\n                    services.AddSingleton(options);\n                    services.AddSingleton<ApiContext>();\n                    services.AddSingleton(NotificationServiceFake);\n\n                    services.AddAuthentication()\n                            .AddBasicAuthentication(credentials => Task.FromResult(credentials.username == Username && credentials.password == Password));\n\n                    services.AddAuthorization(config =>\n                    {\n                        config.DefaultPolicy = new AuthorizationPolicyBuilder(config.DefaultPolicy)\n                                                    .AddAuthenticationSchemes(BasicAuthenticationDefaults.AuthenticationScheme)\n                                                    .Build();\n                    });\n                });\n            });\n    }\n}"
    },
    "IntegrationTestRun": {
      "commitId": "9d46a97a012f68c6e0163fa4770d0d79ab8e147c",
      "result": {
        "stdout": "Test Run Successful.\nTotal tests: 25\n     Passed: 25\n Total time: 3.8768 Seconds",
        "stderr": "warn: Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware[3]\n      Failed to determine the https port for redirect.\ninfo: Bazinga.AspNetCore.Authentication.Basic.BasicAuthenticationHandler[0]\n      Successfully validated credentials for Test.\ninfo: Bazinga.AspNetCore.Authentication.Basic.BasicAuthenticationHandler[12]\n      AuthenticationScheme: Basic was challenged.",
        "returnCode": 0
      },
      "pass": true
    }
  }