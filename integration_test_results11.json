{
    "Repo": {
      "remoteUrl": "https://github.com/Rapter1990/kubernetesjavaclientapi.git",
      "languages": ["java"]
    },
    "IntegrationTest": {
      "fileContent": "package com.example.kubernetesjavaclientapi.controller;\n\nimport com.example.kubernetesjavaclientapi.base.BaseControllerTest;\nimport com.example.kubernetesjavaclientapi.dto.pod.PodDto;\nimport com.example.kubernetesjavaclientapi.payload.request.pods.CreatePodRequest;\nimport com.example.kubernetesjavaclientapi.payload.request.pods.DeletePodRequest;\nimport com.example.kubernetesjavaclientapi.payload.request.pods.EditPodRequest;\nimport com.example.kubernetesjavaclientapi.service.PodService;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.kubernetes.client.openapi.models.V1ObjectMeta;\nimport io.kubernetes.client.openapi.models.V1Pod;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nclass PodControllerTest extends BaseControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @MockBean\n    private PodService podService;\n\n    private static final String BASE_PATH = \"/api/v1/kubernetes/pods\";\n\n    @Test\n    public void testListPods() throws Exception {\n        // Given\n        PodDto podDto = PodDto.builder()\n                .uid(\"TestUid\")\n                .name(\"TestPod\")\n                .build();\n\n        // When\n        when(podService.listPods()).thenReturn(Collections.singletonList(podDto));\n\n        // sng<Then\n        mockMvc.perform(MockMvcRequestBuilders.get(BASE_PATH + \"/listPods\")\n                        .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andDo(print())\n                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$[0].uid\").value(\"TestUid\"))\n                .andExpect(jsonPath(\"$[0].name\").value(\"TestPod\"))\n                .andExpect(jsonPath(\"$\", hasSize(1)))\n                .andReturn();\n    }\n\n    @Test\n    void testCreatePod() throws Exception {\n\n        // Given\n        CreatePodRequest createPodRequest = CreatePodRequest.builder()\n                .namespace(\"default\")\n                .podName(\"test-pod\")\n                .build();\n\n        V1Pod createdPod = new V1Pod();\n        V1ObjectMeta metadata = new V1ObjectMeta();\n        metadata.setName(createPodRequest.getPodName());\n        createdPod.setMetadata(metadata);\n\n        // When\n        when(podService.createPod(any())).thenReturn(createdPod);\n\n        // Then\n        mockMvc.perform(MockMvcRequestBuilders.post(BASE_PATH + \"/createPod\")\n                        .content(objectMapper.writeValueAsString(createPodRequest))\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .accept(MediaType.APPLICATION_JSON))\n                .andDo(print())\n                .andExpect(MockMvcResultMatchers.status().isCreated())\n                .andExpect(MockMvcResultMatchers.content().string(\"Pod created successfully: \" + createPodRequest.getPodName()));\n    }\n\n    @Test\n    public void testEditPod() throws Exception {\n\n        // Given\n        EditPodRequest editPodRequest = EditPodRequest.builder()\n                .namespace(\"default\")\n                .podName(\"test-pod\")\n                .updatedLabels(Map.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n                .build();\n\n        V1Pod editedPod = new V1Pod();\n\n        // Ensure metadata is initialized\n        if (editedPod.getMetadata() == null) {\n            editedPod.setMetadata(new V1ObjectMeta());\n        }\n\n        editedPod.getMetadata().setName(editPodRequest.getPodName());\n\n        when(podService.editPod(any())).thenReturn(editedPod);\n\n        // When/Then\n        mockMvc.perform(MockMvcRequestBuilders.put(BASE_PATH + \"/editPod\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(objectMapper.writeValueAsString(editPodRequest)))\n                .andDo(print())\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.content().string(\"Pod edited successfully: \" + editPodRequest.getPodName()));\n\n        // Verify that podService.editPod is called with the correct argument\n        verify(podService, times(1)).editPod(eq(editPodRequest));\n    }\n\n    @Test\n    public void testDeletePod() throws Exception {\n\n        // Given\n        DeletePodRequest deletePodRequest = DeletePodRequest.builder()\n                .namespace(\"default\")\n                .podName(\"test-pod\")\n                .build();\n\n        // When/Then\n        mockMvc.perform(MockMvcRequestBuilders.delete(BASE_PATH + \"/deletePod\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(objectMapper.writeValueAsString(deletePodRequest)))\n                .andDo(print())\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.content().string(\"Pod deleted successfully: \" + deletePodRequest.getPodName()));\n\n        // Verify that podService.deletePod is called with the correct argument\n        verify(podService, times(1)).deletePod(any());\n    }\n\n}"
    },
    "IntegrationTestRun": {
      "commitId": "64be9d35d5f876ce109bb3791d608156a4c3750b",
      "result": {
        "stdout": "2025-06-13T15:22:29.334-07:00  INFO 68890 --- [           main] c.e.k.controller.PodControllerTest       : Starting PodControllerTest using Java 17.0.15 with PID 68890 (started by aadityasubedi in /Users/aadityasubedi/Desktop/eval-set/repo11/kubernetesjavaclientapi)\n2025-06-13T15:22:29.335-07:00  INFO 68890 --- [           main] c.e.k.controller.PodControllerTest       : No active profile set, falling back to 1 default profile: \"default\"\nOpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended\n2025-06-13T15:22:30.280-07:00  INFO 68890 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''\n2025-06-13T15:22:30.281-07:00  INFO 68890 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''\n2025-06-13T15:22:30.281-07:00  INFO 68890 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms\n2025-06-13T15:22:30.290-07:00  INFO 68890 --- [           main] c.e.k.controller.PodControllerTest       : Started PodControllerTest in 1.056 seconds (process running for 1.472)\n\nMockHttpServletRequest:\n      HTTP Method = DELETE\n      Request URI = /api/v1/kubernetes/pods/deletePod\n       Parameters = {}\n          Headers = [Content-Type:\"application/json;charset=UTF-8\", Content-Length:\"44\"]\n             Body = {\"namespace\":\"default\",\"podName\":\"test-pod\"}\n    Session Attrs = {}\n\nHandler:\n             Type = com.example.kubernetesjavaclientapi.controller.PodController\n           Method = com.example.kubernetesjavaclientapi.controller.PodController#deletePod(DeletePodRequest)\n\nAsync:\n    Async started = false\n     Async result = null\n\nResolved Exception:\n             Type = null\n\nModelAndView:\n        View name = null\n             View = null\n            Model = null\n\nFlashMap:\n       Attributes = null\n\nMockHttpServletResponse:\n           Status = 200\n    Error message = null\n          Headers = [Content-Type:\"text/plain;charset=UTF-8\", Content-Length:\"34\"]\n     Content type = text/plain;charset=UTF-8\n             Body = Pod deleted successfully: test-pod\n    Forwarded URL = null\n   Redirected URL = null\n          Cookies = []\n\nMockHttpServletRequest:\n      HTTP Method = POST\n      Request URI = /api/v1/kubernetes/pods/createPod\n       Parameters = {}\n          Headers = [Content-Type:\"application/json;charset=UTF-8\", Accept:\"application/json\", Content-Length:\"44\"]\n             Body = {\"namespace\":\"default\",\"podName\":\"test-pod\"}\n    Session Attrs = {}\n\nHandler:\n             Type = com.example.kubernetesjavaclientapi.controller.PodController\n           Method = com.example.kubernetesjavaclientapi.controller.PodController#createPod(CreatePodRequest)\n\nAsync:\n    Async started = false\n     Async result = null\n\nResolved Exception:\n             Type = null\n\nModelAndView:\n        View name = null\n             View = null\n            Model = null\n\nFlashMap:\n       Attributes = null\n\nMockHttpServletResponse:\n           Status = 201\n    Error message = null\n          Headers = [Content-Type:\"application/json\", Content-Length:\"34\"]\n     Content type = application/json\n             Body = Pod created successfully: test-pod\n    Forwarded URL = null\n   Redirected URL = null\n          Cookies = []\n\nMockHttpServletRequest:\n      HTTP Method = PUT\n      Request URI = /api/v1/kubernetes/pods/editPod\n       Parameters = {}\n          Headers = [Content-Type:\"application/json;charset=UTF-8\", Content-Length:\"94\"]\n             Body = {\"namespace\":\"default\",\"podName\":\"test-pod\",\"updatedLabels\":{\"key2\":\"value2\",\"key1\":\"value1\"}}\n    Session Attrs = {}\n\nHandler:\n             Type = com.example.kubernetesjavaclientapi.controller.PodController\n           Method = com.example.kubernetesjavaclientapi.controller.PodController#editPod(EditPodRequest)\n\nAsync:\n    Async started = false\n     Async result = null\n\nResolved Exception:\n             Type = null\n\nModelAndView:\n        View name = null\n             View = null\n            Model = null\n\nFlashMap:\n       Attributes = null\n\nMockHttpServletResponse:\n           Status = 200\n    Error message = null\n          Headers = [Content-Type:\"text/plain;charset=UTF-8\", Content-Length:\"33\"]\n     Content type = text/plain;charset=UTF-8\n             Body = Pod edited successfully: test-pod\n    Forwarded URL = null\n   Redirected URL = null\n          Cookies = []\n\nMockHttpServletRequest:\n      HTTP Method = GET\n      Request URI = /api/v1/kubernetes/pods/listPods\n       Parameters = {}\n          Headers = [Content-Type:\"application/json;charset=UTF-8\"]\n             Body = null\n    Session Attrs = {}\n\nHandler:\n             Type = com.example.kubernetesjavaclientapi.controller.PodController\n           Method = com.example.kubernetesjavaclientapi.controller.PodController#listPods()\n\nAsync:\n    Async started = false\n     Async result = null\n\nResolved Exception:\n             Type = null\n\nModelAndView:\n        View name = null\n             View = null\n            Model = null\n\nFlashMap:\n       Attributes = null\n\nMockHttpServletResponse:\n           Status = 200\n    Error message = null\n          Headers = [Content-Type:\"application/json\"]\n     Content type = application/json\n             Body = [{\"uid\":\"TestUid\",\"name\":\"TestPod\",\"annotations\":null,\"clusterName\":null,\"creationTimestamp\":null,\"deletionGracePeriodSeconds\":null,\"deletionTimestamp\":null,\"finalizers\":null,\"generateName\":null,\"generation\":null,\"labels\":null,\"managedFields\":null,\"namespace\":null,\"ownerReferences\":null,\"resourceVersion\":null,\"selfLink\":null}]\n    Forwarded URL = null\n   Redirected URL = null\n          Cookies = []",
        "stderr": "",
        "returnCode": 0
      },
      "pass": true
    }
  }