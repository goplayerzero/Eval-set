{
    "Repo": {
      "remoteUrl": "https://github.com/alexjacobs08/fastApi-Integration-tests.git",
      "languages": ["py"]
    },
    "IntegrationTest": {
      "fileContent": "from app.auth import get_auth\nfrom app.models import TokenData\nfrom app.main import app\n\n\ndef test_login(client):\n    response = client.post(\"/login\", json={\"username\": \"alexjacobs\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert \"jwt\" in response.json()\n\n\ndef test_login_fail(client):\n    response = client.post(\"/login\", json={\"username\": \"alexjacobs\", \"password\": \"not_the_right_password\"})\n    assert response.status_code == 401\n    assert response.json() == {'detail': 'Incorrect username or password'}\n\n\ndef test_get_me_patched_auth(client):\n    # auth works without real jwt because we patched it in the client fixture\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer \" + 'fake.jwt'})\n    assert response.status_code == 200\n    assert response.json() == {'username': 'alexjacobs', 'email': 'alex@example.com'}\n\n\ndef test_get_me_unpatched_auth(client_unpatched_auth):\n    # auth fails without real jwt because we're using the unpatched client fixture\n    response = client_unpatched_auth.get(\"/users/me\", headers={\"Authorization\": \"Bearer \" + 'fake.jwt'})\n    assert response.status_code == 401\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n\n\ndef test_get_me_path_auth_in_fn(client_unpatched_auth):\n    # auth works because we patch it in this test (not in the client fixture)\n    def mock_get_auth():\n        return TokenData(username=\"alexjacobs\")\n    app.dependency_overrides[get_auth] = mock_get_auth\n\n    response = client_unpatched_auth.get(\"/users/me\", headers={\"Authorization\": \"Bearer \" + 'fake.jwt'})\n    assert response.status_code == 200\n    # app.dependency_overrides.clear()\n\n\ndef test_get_me_patch_auth_with_fixture(client_unpatched_auth, mock_get_auth_factory):\n    # auth works because we patch it with a fixture instead of in the client fixture\n    # Note: the fixture is a factory function that returns a function because that's how we have to pass it in\n    app.dependency_overrides[get_auth] = mock_get_auth_factory\n    response = client_unpatched_auth.get(\"/users/me\", headers={\"Authorization\": \"Bearer \" + 'fake.jwt'})\n    assert response.status_code == 200\n    # app.dependency_overrides.clear()\n"
    },
    "IntegrationTestRun": {
      "commitId": "b7377281f9dd2b37192d93d38912245b7392acc9",
      "result": {
        "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.0, pytest-8.4.0, pluggy-1.6.0 -- /Library/Frameworks/Python.framework/Versions/3.13/bin/python3\ncachedir: .pytest_cache\nrootdir: /Users/aadityasubedi/Desktop/eval-set/repo8/fastApi-Integration-tests\nconfigfile: pyproject.toml\nplugins: snapshot-0.9.0, anyio-4.9.0, socket-0.7.0, asyncio-0.26.0, cov-6.1.1\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollected 6 items                                                              \n\ntests/test_auth_api.py::test_login PASSED                                [ 16%]\ntests/test_auth_api.py::test_login_fail PASSED                           [ 33%]\ntests/test_auth_api.py::test_get_me_patched_auth PASSED                  [ 50%]\ntests/test_auth_api.py::test_get_me_unpatched_auth PASSED                [ 66%]\ntests/test_auth_api.py::test_get_me_path_auth_in_fn PASSED               [ 83%]\ntests/test_auth_api.py::test_get_me_patch_auth_with_fixture PASSED       [100%]\n\n=============================== warnings summary ===============================\ntests/test_auth_api.py::test_login\n  /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/botocore/auth.py:425: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    datetime_now = datetime.datetime.utcnow()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n========================= 6 passed, 1 warning in 0.79s =========================",
        "stderr": "",
        "returnCode": 0
      },
      "pass": true
    }
  }
  