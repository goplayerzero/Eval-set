{
  "Repo": {
    "remoteUrl": "git@github.com:ContentSquare/integration-test-examples.git",
    "languages": ["ts", "js", "html", "css", "json"]
  },
  "IntegrationTest": {
    "fileContent": "import { TestBed, ComponentFixture, waitForAsync, tick, fakeAsync, flush } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { Store, StoreModule } from '@ngrx/store';\nimport { HomeComponent } from './home.component';\nimport { TodoListComponent } from '../todo-list/todo-list.component';\nimport { TodoDialogComponent } from '../todo-dialog/todo-dialog.component';\nimport { todosReducer } from '../state/todos/todo.reducer';\nimport { TodoService } from '../services/todo.service';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TodoEffects } from '../state/todos/todo.effect';\nimport { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { of } from 'rxjs';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { Todo } from '../models/todo';\nimport { MatCardModule } from '@angular/material/card';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormBuilder } from '@angular/forms';\n\nconst todoItems: Todo[] = [\n  {\n    \"id\": 0,\n    \"title\": \"Grocery shopping\",\n    \"description\": \"1. A pack of carrots\\n2. Eggs\",\n    \"completed\": false\n  },\n  {\n    \"id\": 1,\n    \"title\": \"Integration Test\",\n    \"description\": \"10 tests\",\n    \"completed\": false\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Pick up kid from school\",\n    \"description\": \"\",\n    \"completed\": true\n  }\n];\n\ndescribe('AppComponent Integration Test', () => {\n  let component: HomeComponent;\n  let fixture: ComponentFixture<HomeComponent>;\n  let todosService: TodoService;\n  let store: Store;\n\n  let todosServiceStub: Partial<TodoService> = {\n    getTodos: jest.fn().mockReturnValue(of(todoItems)),\n    addTodo: jest.fn(),\n    updateTodo: jest.fn().mockImplementation((todo: Todo) => {\n      const updatedTodos = todoItems.slice();\n      const index = updatedTodos.findIndex(item => item.id === todo.id);\n      if(~index) {\n        updatedTodos[index] = todo;\n      }\n      return of(updatedTodos);\n    }),\n    deleteTodo: jest.fn().mockImplementation((id: number) => {\n      return of(todoItems.filter((todo) => todo.id !== id));\n    })\n  };\n\n  const matDialogRefStub: Partial<MatDialogRef<any>> = {\n    close: () => {},\n  };\n\n  beforeEach(async () => {\n    TestBed.configureTestingModule({\n      declarations: [\n        HomeComponent,\n        TodoListComponent,\n        TodoDialogComponent,\n      ],\n      imports: [\n        StoreModule.forRoot({\n          todos: todosReducer,\n        }),\n        EffectsModule.forRoot([\n          TodoEffects\n        ]),\n        MatDialogModule,\n        MatTabsModule,\n        MatCardModule,\n        NoopAnimationsModule,\n      ],\n      providers: [\n        { provide: TodoService, useValue: todosServiceStub },\n        { provide: MatDialog, useClass: MatDialog },\n        { provide: MatDialogRef, useValue: matDialogRefStub },\n        { provide: FormBuilder, useClass: FormBuilder }\n      ],\n    }).compileComponents();\n\n    todosService = TestBed.inject(TodoService);\n    store = TestBed.inject(Store);\n    fixture = TestBed.createComponent(HomeComponent);\n    component = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    TestBed.resetTestingModule();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should display incomplete To-do list', () => {\n    todosService.getTodos = jest.fn().mockReturnValue(of(todoItems))\n    const incompletedTodoItems = fixture.debugElement.queryAll(By.css('mat-card'));\n    expect(incompletedTodoItems.length).toBe(2);\n  });\n\n  it('should display complete To-do list', fakeAsync(() => {\n    const completedTab = fixture.debugElement.queryAll(By.css('.mdc-tab'))[1];\n    completedTab.nativeElement.click();\n    fixture.detectChanges();\n    setTimeout(() => {}, 0);\n    flush();\n    const completedTodoItems = fixture.debugElement.queryAll(By.css('mat-card'));\n    const titleElement = completedTodoItems[2].query(By.css('mat-card-title'));\n    expect(titleElement.nativeElement.textContent).toBe('Pick up kid from school');\n  }));\n\n  it('should be able complete an incompleted todo item', fakeAsync(() => {\n    let firstIncompletedTodoItem = fixture.debugElement.query(By.css('mat-card'));\n    expect(firstIncompletedTodoItem.nativeElement.textContent).toContain(todoItems[0].title);\n\n    const completeButton = firstIncompletedTodoItem\n                        .query(By.css('mat-card-actions'))\n                        .queryAll(By.css('button'))[2];\n    completeButton.nativeElement.click();\n    fixture.detectChanges();\n    firstIncompletedTodoItem = fixture.debugElement.query(By.css('mat-card'));\n    expect(firstIncompletedTodoItem.nativeElement.textContent).not.toContain(todoItems[0].title);\n\n    const completedTab = fixture.debugElement.queryAll(By.css('.mdc-tab'))[1];\n    completedTab.nativeElement.click();\n    fixture.detectChanges();\n    setTimeout(() => {}, 0);\n    flush();\n    const firstCompletedTodoItem = fixture.debugElement.queryAll(By.css('mat-card'))[1];\n    expect(firstCompletedTodoItem.nativeElement.textContent).toContain(todoItems[0].title);\n  }));\n\n  it('should be able delete a todo item', () => {\n    let incompletedTodoItems = fixture.debugElement.queryAll(By.css('mat-card'));\n    expect(incompletedTodoItems.length).toBe(2);\n\n    const deleteButton = incompletedTodoItems[0]\n      .query(By.css('mat-card-actions'))\n      .queryAll(By.css('button'))[0];\n    deleteButton.nativeElement.click();\n    fixture.detectChanges();\n\n    incompletedTodoItems = fixture.debugElement.queryAll(By.css('mat-card'));\n    expect(incompletedTodoItems.length).toBe(1);\n  });\n});"
  },
  "IntegrationTestRun": {
    "id": "run-001",
    "commitId": "76048909ff30bd7c7a7ef0489f87c5ddfca2ac47",
    "result": {
      "stdout": "> todo-app-angular@0.0.0 test\n> jest --clearCache && jest int.spec.ts\n\nCleared /private/var/folders/k0/btb1624n5235gzljgdym1wrh0000gn/T/jest_dx\n\n\n RUNS  src/app/home/home.component.int.spec.ts\nts-jest[config] (WARN) message TS151001: If you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.\n\n RUNS  src/app/home/home.component.int.spec.ts\n\n RUNS  src/app/home/home.component.int.spec.ts\n\n RUNS  src/app/home/home.component.int.spec.ts\n\n RUNS  src/app/home/home.component.int.spec.ts\n\n RUNS  src/app/home/home.component.int.spec.ts\n\n RUNS  src/app/home/home.component.int.spec.ts\n PASS  src/app/home/home.component.int.spec.ts\n\n RUNS  src/app/home/home.component.int.spec.ts\n  AppComponent Integration Test\n\n RUNS  src/app/home/home.component.int.spec.ts\n    ✓ should create the component (66 ms)\n\n RUNS  src/app/home/home.component.int.spec.ts\n    ✓ should display incomplete To-do list (20 ms)\n\n RUNS  src/app/home/home.component.int.spec.ts\n    ✓ should display complete To-do list (23 ms)\n\n RUNS  src/app/home/home.component.int.spec.ts\n    ✓ should be able complete an incompleted todo item (22 ms)\n\n RUNS  src/app/home/home.component.int.spec.ts\n    ✓ should be able delete a todo item (15 ms)\n\n RUNS  src/app/home/home.component.int.spec.ts\n\n\n RUNS  src/app/home/home.component.int.spec.ts\nTest Suites: 1 passed, 1 total\nTests:       5 passed, 5 total\nSnapshots:   0 total\nTime:        2.263 s\nRan all test suites matching /int.spec.ts/i.",
      "stderr": "ts-jest[config] (WARN) message TS151001: If you have issues related to imports, you should consider setting `esModuleInterop` to `true` in your TypeScript configuration file (usually `tsconfig.json`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
      "returnCode": 0
    },
    "pass": true
  }
} 