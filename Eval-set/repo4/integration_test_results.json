{
  "Repo": {
    "remoteUrl": "git@github.com:george-e-shaw-iv/integration-tests-example.git",
    "languages": ["go"]
  },
  "IntegrationTest": {
    "fileContent": "package tests\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t\"github.com/george-e-shaw-iv/integration-tests-example/cmd/listd/list\"\n\t\"github.com/george-e-shaw-iv/integration-tests-example/internal/platform/testdb\"\n\t\"github.com/george-e-shaw-iv/integration-tests-example/internal/platform/web\"\n\t\"github.com/google/go-cmp/cmp\"\n)\n\nfunc Test_getLists(t *testing.T) {\n\t// No Content (no seed data)\n\t{\n\t\treq, err := http.NewRequest(http.MethodGet, \"/list\", nil)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"error creating request: %v\", err)\n\t\t}\n\n\t\tw := httptest.NewRecorder()\n\t\ta.ServeHTTP(w, req)\n\n\t\tif e, a := http.StatusOK, w.Code; e != a {\n\t\t\tt.Errorf(\"expected status code: %v, got status code: %v\", e, a)\n\t\t}\n\n\t\tvar lists []list.List\n\t\tresp := web.Response{\n\t\t\tResults: &lists,\n\t\t}\n\n\t\tif err := json.NewDecoder(w.Body).Decode(&resp); err != nil {\n\t\t\tt.Errorf(\"error decoding response body: %v\", err)\n\t\t}\n\n\t\tif len(lists) > 0 {\n\t\t\tt.Errorf(\"expected no lists to be returned, got %v lists\", len(lists))\n\t\t}\n\t}\n\n\t// Ok (database has been seeded)\n\t{\n\t\tdefer func() {\n\t\t\tif err := testdb.Truncate(a.DB); err != nil {\n\t\t\t\tt.Errorf(\"error truncating test database tables: %v\", err)\n\t\t\t}\n\t\t}()\n\n\t\texpectedLists, err := testdb.SeedLists(a.DB)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"error seeding lists: %v\", err)\n\t\t}\n\n\t\treq, err := http.NewRequest(http.MethodGet, \"/list\", nil)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"error creating request: %v\", err)\n\t\t}\n\n\t\tw := httptest.NewRecorder()\n\t\ta.ServeHTTP(w, req)\n\n\t\tif e, a := http.StatusOK, w.Code; e != a {\n\t\t\tt.Errorf(\"expected status code: %v, got status code: %v\", e, a)\n\t\t}\n\n\t\tvar lists []list.List\n\t\tresp := web.Response{\n\t\t\tResults: lists,\n\t\t}\n\n\t\tif err := json.NewDecoder(w.Body).Decode(&resp); err != nil {\n\t\t\tt.Errorf(\"error decoding response body: %v\", err)\n\t\t}\n\n\t\tif d := cmp.Diff(expectedLists, lists); d != \"\" {\n\t\t\tt.Errorf(\"unexpected difference in response body:\\n%v\", d)\n\t\t}\n\t}\n}\n\nfunc Test_createList(t *testing.T) {\n\tdefer func() {\n\t\tif err := testdb.Truncate(a.DB); err != nil {\n\t\t\tt.Errorf(\"error truncating test database tables: %v\", err)\n\t\t}\n\t}()\n\n\ttests := []struct {\n\t\tName         string\n\t\tRequestBody  list.List\n\t\tExpectedCode int\n\t}{\n\t\t{\n\t\t\tName: \"OK\",\n\t\t\tRequestBody: list.List{\n\t\t\t\tName: \"Foo\",\n\t\t\t},\n\t\t\tExpectedCode: http.StatusCreated,\n\t\t},\n\t\t{\n\t\t\tName: \"BreakUniqueNameConstraint\",\n\t\t\tRequestBody: list.List{\n\t\t\t\tName: \"Foo\",\n\t\t\t},\n\t\t\tExpectedCode: http.StatusBadRequest,\n\t\t},\n\t\t{\n\t\t\tName:         \"NoName\",\n\t\t\tRequestBody:  list.List{},\n\t\t\tExpectedCode: http.StatusBadRequest,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tfn := func(t *testing.T) {\n\t\t\tvar b bytes.Buffer\n\t\t\tif err := json.NewEncoder(&b).Encode(test.RequestBody); err != nil {\n\t\t\t\tt.Errorf(\"error encoding request body: %v\", err)\n\t\t\t}\n\n\t\t\treq, err := http.NewRequest(http.MethodPost, \"/list\", &b)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error creating request: %v\", err)\n\t\t\t}\n\n\t\t\tdefer func() {\n\t\t\t\tif err := req.Body.Close(); err != nil {\n\t\t\t\t\tt.Errorf(\"error encountered closing request body: %v\", err)\n\t\t\t\t}\n\t\t\t}()\n\n\t\t\tw := httptest.NewRecorder()\n\t\t\ta.ServeHTTP(w, req)\n\n\t\t\tif e, a := test.ExpectedCode, w.Code; e != a {\n\t\t\t\tt.Errorf(\"expected status code: %v, got status code: %v\", e, a)\n\t\t\t}\n\n\t\t\tif test.ExpectedCode != http.StatusBadRequest {\n\t\t\t\tvar l list.List\n\t\t\t\tresp := web.Response{\n\t\t\t\t\tResults: l,\n\t\t\t\t}\n\n\t\t\t\tif err := json.NewDecoder(w.Body).Decode(&resp); err != nil {\n\t\t\t\t\tt.Errorf(\"error decoding response body: %v\", err)\n\t\t\t\t}\n\n\t\t\t\tif e, a := test.RequestBody.Name, l.Name; e != a {\n\t\t\t\t\tt.Errorf(\"expected list name: %v, got list name: %v\", e, a)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tt.Run(test.Name, fn)\n\t}\n}\n\nfunc Test_getList(t *testing.T) { ... }\n\nfunc Test_updateList(t *testing.T) { ... }\n\nfunc Test_deleteList(t *testing.T) { ... }\n"
  },
  "IntegrationTestRun": {
    "commitId": "f121db7c5c62a90721f70b0df079a50354b96a64",
    "result": {
      "stdout": " > [listd_tests 2/3] RUN set -ex;     apk update;     apk add --no-cache git:   0.158 + apk update   0.182 fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/aarch64/APKINDEX.tar.gz 0.248 ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.11/main: Protocol error 0.248 WARNING: Ignoring APKINDEX.70f61090.tar.gz: No such file or directory 0.248 fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/aarch64/APKINDEX.tar.gz 0.275 ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.11/community: Protocol error 0.275 WARNING: Ignoring APKINDEX.ca2fea5b.tar.gz: No such file or directory 0.275 2 errors; 15 distinct packages available ------ failed to solve: process \"/bin/sh -c set -ex;     apk update;     apk add --no-cache git\" did not complete successfully: exit code: 2 make: *** [test] Error 1\n",
      "stderr": "",
      "returnCode": 2
    },
    "pass": false
  }
}
